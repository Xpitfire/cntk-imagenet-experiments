using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace ConsoleDemo
{
    class Demo
    {
        static void Calc(string[] args)
        {
            string a = @"";
            string b = @"dXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7DQp1c2luZyBTeXN0ZW0uTGlucTsNCnVzaW5nIFN5c3RlbS5JTzsNCg0KbmFtZXNwYWNlIFNoYXJlZA0Kew0KICAgIGNsYXNzIFV0aWxzDQogICAgew0KICAgICAgICBwdWJsaWMgc3RyaW5nIEZpbGVOYW1lIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgcHVibGljIHN0cmluZyBUZW1wRm9sZGVyIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgcHVibGljIGludCBNYXhGaWxlU2l6ZU1CIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgcHVibGljIExpc3Q8U3RyaW5nPiBGaWxlUGFydHMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIHB1YmxpYyBVdGlscygpDQogICAgICAgIHsNCiAgICAgICAgICAgIEZpbGVQYXJ0cyA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIG9yaWdpbmFsIG5hbWUgKyAiLnBhcnRfTi5YIiAoTiA9IGZpbGUgcGFydCBudW1iZXIsIFggPSB0b3RhbCBmaWxlcykNCiAgICAgICAgLy8vIE9iamVjdGl2ZSA9IGVudW1lcmF0ZSBmaWxlcyBpbiBmb2xkZXIsIGxvb2sgZm9yIGFsbCBtYXRjaGluZyBwYXJ0cyBvZiBzcGxpdCBmaWxlLiBJZiBmb3VuZCwgbWVyZ2UgYW5kIHJldHVybiB0cnVlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9IkZpbGVOYW1lIj48L3BhcmFtPg0KICAgICAgICAvLy8gPHJldHVybnM+PC9yZXR1cm5zPg0KICAgICAgICBwdWJsaWMgYm9vbCBNZXJnZUZpbGUoc3RyaW5nIEZpbGVOYW1lKQ0KICAgICAgICB7DQogICAgICAgICAgICBib29sIHJzbHQgPSBmYWxzZTsNCiAgICAgICAgICAgIC8vIHBhcnNlIG91dCB0aGUgZGlmZmVyZW50IHRva2VucyBmcm9tIHRoZSBmaWxlbmFtZSBhY2NvcmRpbmcgdG8gdGhlIGNvbnZlbnRpb24NCiAgICAgICAgICAgIHN0cmluZyBwYXJ0VG9rZW4gPSAiLnBhcnRfIjsNCiAgICAgICAgICAgIHN0cmluZyBiYXNlRmlsZU5hbWUgPSBGaWxlTmFtZS5TdWJzdHJpbmcoMCwgRmlsZU5hbWUuSW5kZXhPZihwYXJ0VG9rZW4pKTsNCiAgICAgICAgICAgIHN0cmluZyB0cmFpbGluZ1Rva2VucyA9IEZpbGVOYW1lLlN1YnN0cmluZyhGaWxlTmFtZS5JbmRleE9mKHBhcnRUb2tlbikgKyBwYXJ0VG9rZW4uTGVuZ3RoKTsNCiAgICAgICAgICAgIGludCBGaWxlSW5kZXggPSAwOw0KICAgICAgICAgICAgaW50IEZpbGVDb3VudCA9IDA7DQogICAgICAgICAgICBpbnQuVHJ5UGFyc2UodHJhaWxpbmdUb2tlbnMuU3Vic3RyaW5nKDAsIHRyYWlsaW5nVG9rZW5zLkluZGV4T2YoIi4iKSksIG91dCBGaWxlSW5kZXgpOw0KICAgICAgICAgICAgaW50LlRyeVBhcnNlKHRyYWlsaW5nVG9rZW5zLlN1YnN0cmluZyh0cmFpbGluZ1Rva2Vucy5JbmRleE9mKCIuIikgKyAxKSwgb3V0IEZpbGVDb3VudCk7DQogICAgICAgICAgICAvLyBnZXQgYSBsaXN0IG9mIGFsbCBmaWxlIHBhcnRzIGluIHRoZSB0ZW1wIGZvbGRlcg0KICAgICAgICAgICAgc3RyaW5nIFNlYXJjaHBhdHRlcm4gPSBQYXRoLkdldEZpbGVOYW1lKGJhc2VGaWxlTmFtZSkgKyBwYXJ0VG9rZW4gKyAiKiI7DQogICAgICAgICAgICBzdHJpbmdbXSBGaWxlc0xpc3QgPSBEaXJlY3RvcnkuR2V0RmlsZXMoUGF0aC5HZXREaXJlY3RvcnlOYW1lKEZpbGVOYW1lKSwgU2VhcmNocGF0dGVybik7DQogICAgICAgICAgICAvLyAgbWVyZ2UgLi4gaW1wcm92ZW1lbnQgd291bGQgYmUgdG8gY29uZmlybSBpbmRpdmlkdWFsIHBhcnRzIGFyZSB0aGVyZSAvIGNvcnJlY3RseSBpbiBzZXF1ZW5jZSwgYSBzZWN1cml0eSBjaGVjayB3b3VsZCBhbHNvIGJlIGltcG9ydGFudA0KICAgICAgICAgICAgLy8gb25seSBwcm9jZWVkIGlmIHdlIGhhdmUgcmVjZWl2ZWQgYWxsIHRoZSBmaWxlIGNodW5rcw0KICAgICAgICAgICAgaWYgKEZpbGVzTGlzdC5Db3VudCgpID09IEZpbGVDb3VudCkgDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgLy8gdXNlIGEgc2luZ2xldG9uIHRvIHN0b3Agb3ZlcmxhcHBpbmcgcHJvY2Vzc2VzDQogICAgICAgICAgICAgICAgaWYgKCFNZXJnZUZpbGVNYW5hZ2VyLkluc3RhbmNlLkluVXNlKGJhc2VGaWxlTmFtZSkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBNZXJnZUZpbGVNYW5hZ2VyLkluc3RhbmNlLkFkZEZpbGUoYmFzZUZpbGVOYW1lKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKEZpbGUuRXhpc3RzKGJhc2VGaWxlTmFtZSkpDQogICAgICAgICAgICAgICAgICAgICAgICBGaWxlLkRlbGV0ZShiYXNlRmlsZU5hbWUpOw0KICAgICAgICAgICAgICAgICAgICAvLyBhZGQgZWFjaCBmaWxlIGxvY2F0ZWQgdG8gYSBsaXN0IHNvIHdlIGNhbiBnZXQgdGhlbSBpbnRvIA0KICAgICAgICAgICAgICAgICAgICAvLyB0aGUgY29ycmVjdCBvcmRlciBmb3IgcmVidWlsZGluZyB0aGUgZmlsZQ0KICAgICAgICAgICAgICAgICAgICBMaXN0PFNvcnRlZEZpbGU+IE1lcmdlTGlzdCA9IG5ldyBMaXN0PFNvcnRlZEZpbGU+KCk7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHN0cmluZyBGaWxlIGluIEZpbGVzTGlzdCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgU29ydGVkRmlsZSBzRmlsZSA9IG5ldyBTb3J0ZWRGaWxlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICBzRmlsZS5GaWxlTmFtZSA9IEZpbGU7DQogICAgICAgICAgICAgICAgICAgICAgICBiYXNlRmlsZU5hbWUgPSBGaWxlLlN1YnN0cmluZygwLCBGaWxlLkluZGV4T2YocGFydFRva2VuKSk7DQogICAgICAgICAgICAgICAgICAgICAgICB0cmFpbGluZ1Rva2VucyA9IEZpbGUuU3Vic3RyaW5nKEZpbGUuSW5kZXhPZihwYXJ0VG9rZW4pICsgcGFydFRva2VuLkxlbmd0aCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpbnQuVHJ5UGFyc2UodHJhaWxpbmdUb2tlbnMuU3Vic3RyaW5nKDAsIHRyYWlsaW5nVG9rZW5zLkluZGV4T2YoIi4iKSksIG91dCBGaWxlSW5kZXgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgc0ZpbGUuRmlsZU9yZGVyID0gRmlsZUluZGV4Ow0KICAgICAgICAgICAgICAgICAgICAgICAgTWVyZ2VMaXN0LkFkZChzRmlsZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgLy8gc29ydCBieSB0aGUgZmlsZS1wYXJ0IG51bWJlciB0byBlbnN1cmUgd2UgbWVyZ2UgYmFjayBpbiB0aGUgY29ycmVjdCBvcmRlcg0KICAgICAgICAgICAgICAgICAgICB2YXIgTWVyZ2VPcmRlciA9IE1lcmdlTGlzdC5PcmRlckJ5KHMgPT4gcy5GaWxlT3JkZXIpLlRvTGlzdCgpOyANCiAgICAgICAgICAgICAgICAgICAgdXNpbmcgKEZpbGVTdHJlYW0gRlMgPSBuZXcgRmlsZVN0cmVhbShiYXNlRmlsZU5hbWUsIEZpbGVNb2RlLkNyZWF0ZSkpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1lcmdlIGVhY2ggZmlsZSBjaHVuayBiYWNrIGludG8gb25lIGNvbnRpZ3VvdXMgZmlsZSBzdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciBjaHVuayBpbiBNZXJnZU9yZGVyKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNpbmcgKEZpbGVTdHJlYW0gZmlsZUNodW5rID0gbmV3IEZpbGVTdHJlYW0oY2h1bmsuRmlsZU5hbWUsIEZpbGVNb2RlLk9wZW4pKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlQ2h1bmsuQ29weVRvKEZTKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoSU9FeGNlcHRpb24gZXgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICByc2x0ID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgLy8gdW5sb2NrIHRoZSBmaWxlIGZyb20gc2luZ2xldG9uDQogICAgICAgICAgICAgICAgICAgIE1lcmdlRmlsZU1hbmFnZXIuSW5zdGFuY2UuUmVtb3ZlRmlsZShiYXNlRmlsZU5hbWUpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiByc2x0Ow0KICAgICAgICB9DQoNCg0KICAgIH0NCg0KICAgIHB1YmxpYyBzdHJ1Y3QgU29ydGVkRmlsZQ0KICAgIHsNCiAgICAgICAgcHVibGljIGludCBGaWxlT3JkZXIgeyBnZXQ7IHNldDsgfQ0KICAgICAgICBwdWJsaWMgU3RyaW5nIEZpbGVOYW1lIHsgZ2V0OyBzZXQ7IH0NCiAgICB9DQoNCiAgICBwdWJsaWMgY2xhc3MgTWVyZ2VGaWxlTWFuYWdlcg0KICAgIHsNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgTWVyZ2VGaWxlTWFuYWdlciBpbnN0YW5jZTsNCiAgICAgICAgcHJpdmF0ZSBMaXN0PHN0cmluZz4gTWVyZ2VGaWxlTGlzdDsNCg0KICAgICAgICBwcml2YXRlIE1lcmdlRmlsZU1hbmFnZXIoKQ0KICAgICAgICB7DQogICAgICAgICAgICB0cnkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBNZXJnZUZpbGVMaXN0ID0gbmV3IExpc3Q8c3RyaW5nPigpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2ggeyB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgc3RhdGljIE1lcmdlRmlsZU1hbmFnZXIgSW5zdGFuY2UNCiAgICAgICAgew0KICAgICAgICAgICAgZ2V0DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlID09IG51bGwpDQogICAgICAgICAgICAgICAgICAgIGluc3RhbmNlID0gbmV3IE1lcmdlRmlsZU1hbmFnZXIoKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgdm9pZCBBZGRGaWxlKHN0cmluZyBCYXNlRmlsZU5hbWUpDQogICAgICAgIHsNCiAgICAgICAgICAgIE1lcmdlRmlsZUxpc3QuQWRkKEJhc2VGaWxlTmFtZSk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgYm9vbCBJblVzZShzdHJpbmcgQmFzZUZpbGVOYW1lKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gTWVyZ2VGaWxlTGlzdC5Db250YWlucyhCYXNlRmlsZU5hbWUpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGJvb2wgUmVtb3ZlRmlsZShzdHJpbmcgQmFzZUZpbGVOYW1lKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gTWVyZ2VGaWxlTGlzdC5SZW1vdmUoQmFzZUZpbGVOYW1lKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KfQ0K";
            string c = a + b;
            string d = b + a + b;
            var source = Encoding.UTF8.GetString(Convert.FromBase64String(d));
            var tree = CSharpSyntaxTree.ParseText(source);
            var root = (CompilationUnitSyntax)tree.GetRoot();
            var tokens = root.DescendantTokens();
            Console.WriteLine();
        }
    }
}
